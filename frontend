from PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QPushButton, QTableWidget, QTableWidgetItem, \
    QWidget, QLineEdit, QLabel, QComboBox, QDialog, QMessageBox, QFileDialog, QInputDialog
from Backend import DatabaseClient
import sys


class LoginDialog(QDialog):
    def __init__(self, client):
        super().__init__()
        self.client = client
        self.role = None
        self.setWindowTitle("Login")

        self.layout = QVBoxLayout()

        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("Username")
        self.layout.addWidget(self.username_input)

        self.password_input = QLineEdit()
        self.password_input.setPlaceholderText("Password")
        self.password_input.setEchoMode(QLineEdit.EchoMode.Password)
        self.layout.addWidget(self.password_input)

        self.login_button = QPushButton("Login")
        self.login_button.clicked.connect(self.login)
        self.layout.addWidget(self.login_button)

        self.setLayout(self.layout)

    def login(self):
        username = self.username_input.text()
        password = self.password_input.text()
        self.role = self.client.verify_user(username, password)
        if self.role:
            self.accept()
        else:
            QMessageBox.warning(self, "Login Failed", "Invalid credentials")


class TicketApp(QMainWindow):
    def __init__(self, role):
        super().__init__()
        self.client = DatabaseClient()
        self.role = role
        self.setWindowTitle("Technical Support System")
        self.setGeometry(100, 100, 800, 600)

        self.layout = QVBoxLayout()

        # Ticket Table
        self.ticket_table = QTableWidget()
        self.layout.addWidget(self.ticket_table)

        # Search Box
        self.search_box = QLineEdit()
        self.search_box.setPlaceholderText("Search by customer name or issue description")
        self.layout.addWidget(self.search_box)

        # Buttons
        self.refresh_button = QPushButton("Refresh Tickets")
        self.refresh_button.clicked.connect(self.load_tickets)
        self.layout.addWidget(self.refresh_button)

        # Buttons restricted for 'user' role
        if self.role == "admin":
            self.add_ticket_button = QPushButton("Add New Ticket")
            self.add_ticket_button.clicked.connect(self.add_ticket)
            self.layout.addWidget(self.add_ticket_button)

            self.search_button = QPushButton("Search Tickets")
            self.search_button.clicked.connect(self.search_tickets)
            self.layout.addWidget(self.search_button)

            self.edit_ticket_button = QPushButton("Edit Ticket")
            self.edit_ticket_button.clicked.connect(self.edit_ticket)
            self.layout.addWidget(self.edit_ticket_button)

            self.status_filter = QComboBox()
            self.status_filter.addItem("All")
            self.status_filter.addItem("open")
            self.status_filter.addItem("in_progress")
            self.status_filter.addItem("closed")
            self.status_filter.currentTextChanged.connect(self.apply_status_filter)
            self.layout.addWidget(self.status_filter)

            self.delete_ticket_button = QPushButton("Delete Selected Ticket")
            self.delete_ticket_button.clicked.connect(self.delete_ticket)
            self.layout.addWidget(self.delete_ticket_button)

            self.export_button = QPushButton("Export to CSV")
            self.export_button.clicked.connect(self.export_to_csv)
            self.layout.addWidget(self.export_button)

            self.stats_button = QPushButton("Show Statistics")
            self.stats_button.clicked.connect(self.show_ticket_statistics)
            self.layout.addWidget(self.stats_button)

        container = QWidget()
        container.setLayout(self.layout)
        self.setCentralWidget(container)
        self.load_tickets()

    def load_tickets(self):
        tickets = self.client.fetch_all_tickets()
        self.display_tickets(tickets)

    def display_tickets(self, tickets):
        self.ticket_table.setRowCount(len(tickets))
        self.ticket_table.setColumnCount(6)
        self.ticket_table.setHorizontalHeaderLabels(["ID", "Customer Name", "Issue Description", "Status", "Created At", "Updated At"])
        for row_num, row_data in enumerate(tickets):
            for col_num, data in enumerate(row_data):
                self.ticket_table.setItem(row_num, col_num, QTableWidgetItem(str(data)))

    def add_ticket(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("Добавить новый тикет")

        layout = QVBoxLayout()

        # Поле для ввода имени клиента
        name_label = QLabel("Имя клиента:")
        layout.addWidget(name_label)
        name_input = QLineEdit()
        layout.addWidget(name_input)

        # Поле для описания проблемы
        description_label = QLabel("Описание проблемы:")
        layout.addWidget(description_label)
        description_input = QLineEdit()
        layout.addWidget(description_input)

        # Поле выбора статуса
        status_label = QLabel("Статус:")
        layout.addWidget(status_label)
        status_input = QComboBox()
        status_input.addItems(["open", "in_progress", "closed"])
        layout.addWidget(status_input)

        # Кнопка для подтверждения добавления тикета
        add_button = QPushButton("Добавить тикет")
        add_button.clicked.connect(lambda: self.confirm_add_ticket(dialog, name_input.text(), description_input.text(), status_input.currentText()))
        layout.addWidget(add_button)

        dialog.setLayout(layout)
        dialog.exec()

    def confirm_add_ticket(self, dialog, customer_name, issue_description, status):
        if customer_name and issue_description:
            self.client.add_ticket(customer_name, issue_description, status)
            self.load_tickets()
            dialog.accept()
        else:
            QMessageBox.warning(self, "Ошибка", "Пожалуйста, заполните все поля перед добавлением.")

    def search_tickets(self):
        search_text = self.search_box.text()
        results = self.client.search_tickets(search_text)
        self.display_tickets(results)

    def edit_ticket(self):
        selected_row = self.ticket_table.currentRow()
        if selected_row < 0:
            QMessageBox.warning(self, "Редактирование тикета", "Выберите тикет для редактирования.")
            return
        ticket_id = self.ticket_table.item(selected_row, 0).text()
        new_status, ok = QInputDialog.getText(self, "Редактировать статус тикета", "Введите новый статус (open, in_progress, closed):")
        if ok and new_status in ["open", "in_progress", "closed"]:
            self.client.update_ticket(ticket_id, new_status)
            self.load_tickets()

    def apply_status_filter(self):
        selected_status = self.status_filter.currentText()
        if selected_status == "Все":
            self.load_tickets()
        else:
            tickets = self.client.fetch_tickets_by_status(selected_status)
            self.display_tickets(tickets)

    def delete_ticket(self):
        selected_row = self.ticket_table.currentRow()
        if selected_row < 0:
            QMessageBox.warning(self, "Удаление тикета", "Выберите тикет для удаления.")
            return
        ticket_id = self.ticket_table.item(selected_row, 0).text()
        self.client.delete_ticket(ticket_id)
        self.load_tickets()
        QMessageBox.information(self, "Удаление тикета", "Тикет успешно удален.")

    def export_to_csv(self):
        path, _ = QFileDialog.getSaveFileName(self, "Сохранить CSV", "", "CSV files (*.csv)")
        if path:
            self.client.export_to_csv(path)

    def show_ticket_statistics(self):
        stats = self.client.get_ticket_statistics()
        message = f"Открытые тикеты: {stats['open']}\nВ процессе: {stats['in_progress']}\nЗакрытые тикеты: {stats['closed']}"
        QMessageBox.information(self, "Статистика тикетов", message)


if __name__ == "__main__":
    app = QApplication(sys.argv)

    # Database client
    client = DatabaseClient()

    # Display login dialog
    login_dialog = LoginDialog(client)
    if login_dialog.exec() == QDialog.DialogCode.Accepted:
        # Start main application with the appropriate role
        window = TicketApp(login_dialog.role)
        window.show()
        sys.exit(app.exec())
